De esta manera creamos un entorno virtual -m = modulo el ultumo venv es el nombre de la carpeta que se creará
    C:\Python_Total\Django_crud>py -m venv venv
    python --version checa la versión de python que estaremos utilizando

Para activar el entorno virtual creado venv:
    .\venv\Scripts\activate  

pip install django -> para instalar django 

django-admin --version -> verifica la version de django-admin 
5.1.3

Para crear un nuevo projcto en django:
    django-admin startproject djangocrud . el punto indica que lo debe de crear dentro de la carpeta raiz y no crear una carpeta adicional para el proyecto

Para activar el servidor:
    python manage.py runserver



    ***********************APLICACION TASK***************************
pARA INICIAR una palicación usamos el comando:
    python manage.py startapp tasks
Despues agregamos l apalicacion creada en settings.py en el apartado de:
    
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'tasks',
    ]



********Views nos permite visitar una url*******
Tambien se debe de importar HttpResponse dentro del mismo moculo de views
    def helloword(request):
    return HttpResponse('Hola mundo desde Django')


Para poder visualizar el hola mundo debemos de agregar la vista a urls del proyecto creado djangocrud, dentro de path primero va la ruta y despues la funcion que se llamara al seleccionar tal url
    from tasks import views

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', views.helloword), nota: las comillas de la url va sin espacion en caso de no agregar nombre
    ]

HttpResponse: # Cuando vamos a usa templates no es necesario usar HttpResponse si no render ya que renderiza los formatos html, En las vistas de Django, se utiliza HttpResponse para devolver el resultado de una solicitud. Si la vista no devuelve un objeto HttpResponse, Django asumirá que no está manejando correctamente la solicitud.

Render: Renderizar plantillas HTML: La función render() es la forma más común de devolver respuestas HTML dinámicas. Permite utilizar plantillas en las que se pueden incrustar variables o datos de Python.

    Parámetros de la función render()
        *request: El objeto de solicitud HTTP que contiene todos los datos de la solicitud hecha por el cliente (como las cookies, los datos del formulario, etc.).
        *template_name: El nombre de la plantilla HTML que se va a renderizar (en este caso, 'mi_plantilla.html').
        *context: Un diccionario que contiene las variables que quieres pasar a la plantilla. Estas variables pueden ser cualquier tipo de dato que necesites mostrar dinámicamente.


**********************FORMS*********************
cADA FORMULARIO debe de usar csrf_token ya que es una medida de seguridad para el uso de los formularios, evita que sean suplantados 

    <form action="/singup/" method="POST">
        {% csrf_token %}
        {{form.as_p}}

        <button>
            Singup
        </button>
    </form>

En url se debe de agragar la ruta a la cual se envíara  el formulario
    path('singup/', views.helloword)



**********Register User************+
antes de agregar un usuario debemos de hacer las migraciones correspondientes para poder agregar usuarios:

def singup(request):
    if request.method == 'GET':
        print('Enviando formulario')
        return render(request, 'singup.html',{
        'form': UserCreationForm
    })
    else:
        if request.POST['password1'] == request.POST['password2']:
            try:
                #register user 
                user = User.objects.create_user(username=request.POST['username'], password=request.POST['password1'])
                user.save()
                return HttpResponse('User created successfuly')
            except:
                return HttpResponse('User already exists')
        return HttpResponse('Password do not match')




**********************MEJORANDO ERRORES*****************+
********************************************************

Se agrego el renderizado a los errores para que en vez de cargar una nueva página con los errores nos cargue en mismo formulario y en la parte superior nos muestre el error:

views.py
    def singup(request):
    if request.method == 'GET':
        print('Enviando formulario')
        return render(request, 'singup.html', {
            'form': UserCreationForm
        })
    else:
        if request.POST['password1'] == request.POST['password2']:
            try:
                # register user
                user = User.objects.create_user(
                username=request.POST['username'], password=request.POST['password1'])
                user.save()
                return HttpResponse('User created successfuly')
            except:
                return render(request, 'singup.html', {
                    'form': UserCreationForm,
                    'error': 'User already exists'
                })
                # de esta manera en vez de que cargue un template con el error lo redirige al mismo template y en la parte superior agrega el error, mostrando la página del formulario
        return render(request, 'singup.html', {
            'form': UserCreationForm,
            'error': 'Password do not match'
        })

singup.html:
    <h1>Singup</h1>

    {% comment %} Muestra ek error que se origina en la funcion singup {% endcomment %}
    {{error}}

    {% comment %} Con action indicamos a donde queremos enviar los datos, que es a singup y si lo omitimos por defecto los envia a la misma ruta donde fueron almacenados o requeridos {% endcomment %}
    <form action="/singup/" method="POST">
        {% csrf_token %}
        {{form.as_p}}

        <button>
            Singup
        </button>
    </form>





***************LOGIN Y VISTA DE TAREAS**************+
*****************************************************
Redirect: no redireccionan a un template en especifico o ruta definida usando el redirect

# Para crear usuarios importa la clase User
    from django.contrib.auth.models import User

#tambien podemos usar errores especificos como integrity error
    from django.db import IntegrityError

#permite crear una cookie que indica que se ha iniciado sesión, nota: no valida que los datos sean correctos
    from django.contrib.auth import login

#En la seccion del excep solo se agrego el IntegrityError
    except IntegrityError: #-> podemos considerar exepciones a errores en especifico



***************templates and condicionales***************
*********************************************************

Para desloguearnos entramos a modo desarrollador en el apartado de aplicacions - cookies - sessionid click derecho eliminar sessionid

Dentro de base creamos un if en el cual si un usuario esta logeado aparacere el icono o el url de logout y si esta deslogueado aparecera singup:
    <nav>
        <ul>
            <li>
                <a href='/'>Home</a>
            </li>
            <li>
                <a href='/tasks'>Tasks</a>
            </li>
            {% if user.is_authenticated %}
                <li>
                    <a href='/logout'>Logout</a>
                </li>
            {% else %}
                <li>
                    <a href='/singup'>Singup</a>
                </li>
            {% endif %}
        </ul>
    </nav>


****************Logout************************
**********************************************
e importamos la clase logout depues de login en la misma linea:
    #usa la clase de logout la cual debemos de importar, no se puede usar logout como nombre de la función si no marcará error, al cerrar la sesión nos enviara a home
    def singout(request):
        logout(request)
        return redirect('home')
    
Tambien agregamos la ruta y la funcion creada en views:
     path('logout/', views.singout, name='logout'),



*******************Login******************
******************************************
Para que el usuario vuelva a autenticarse de nuevo y no tener que registrarse cada que necesite iniciar sesión
    1.Usamos AuthenticationForm
    2.authenticate
    3.Agregamos un error en caso de que el usuario y password no coincida
    4.Agregamos el url singin 
    5.Creamo el template singin.html


TAMBIEN tenemos la clase de AuthenticationForm la cual usaremos para iniciar sesión, nos permite comprobar si el usuario existe.

*Usando POST permite que los datos no sean expuestos dentro de la misma url:

*Con ESTA SECCION vemos como envia datos con POST:
    def singin(request):
    if request.method == 'GET':
        return render(request, 'singin.html',{
            'form': AuthenticationForm
        })
    else:
        print(request.POST)
        return render(request, 'singin.html',{
            'form': AuthenticationForm
        })

*Para hacer la autenticacion tambien importamos -> authenticate




******************************Tasks model****************
*********************************************************

*Elemento usados para el modelo task.
    1.ORM Object Relational Mapping permite crear, actualizar, eliminar o leer datos
    2.Creamos la base de datos con la tabla tasks en el archivo -> models.py
    3.Importamos la clase de User a models y creamos la relacion para agregar la foreignkey de user a task
    4.Hacemos el makemigrations para crear la tabla y despues hacemos la migración con migrate y ejecuta la tabla
    5.Podemos interactuar con los modelos desde python manage.py shell, solo que una forma mas compleja que con l ainterfaz grafica
    6.Para acceder a la interfaz grafica podemos usar la de admin, solo que para ingresar debemos de uniciar sesion con un super usuario y lo podemos crear con el siguiete comando: "python manage.py createsuperuser"
        python manage.py createsuperuser
        Username (leave blank to use 'giova'): GiovanniSosa
        Email address: giovanni-sosa-12@outlook.com
        Password: 
        Password (again):
        Superuser created successfully.
    7.Para que la interfaz tenga acceso a las tablas creadas en models.py debemos de aregarlas a admin.py de nuestra aplicacion de task
    8.Agregamos el metodo str dento de models.py para poder visualizar el nombre de la tarea y el usuario asignado a tal tarea.
    9.Podemos agregra datos de solo lectrura en el mismo apartado de admin.py para poder vizualizarlos desde la interfaz grafica donde se agrego:
            from django.contrib import admin
            from .models import Task

            # esta clase nos permite ver en la interfaz de admin campos de solo lectura como el campo created ya que es un campo que se llena de manera automatica al crear cualquier tarea
            # Hereda todo lo que este en admin.ModelAdmin
            class TaskAdmin(admin.ModelAdmin):
                # Indicamos que son campos de solo lectura, colocamos una coma al final porque es una tupla
                readonly_fields = ("created", )
                
            # Register your models here.
            admin.site.register(Task, TaskAdmin)



De esta manera creamos un entorno virtual -m = modulo el ultimo venv es el nombre de la carpeta que se creará
    C:\Python_Total\Django_crud>py -m venv venv
    python --version checa la versión de python que estaremos utilizando

Para activar el entorno virtual creado venv:
    .\venv\Scripts\activate  en cmd
Para activar el entorno virtual en Bash es con
    source venv/Scripts/activate
Para ver la version de django en bash:
    python -m django --version: Este comando le pide a Python que ejecute el módulo django y te muestre la versión instalada de Django.


pip install django -> para instalar django 

django-admin --version -> verifica la version de django-admin 
5.1.3

Para crear un nuevo projcto en django:
    django-admin startproject djangocrud . el punto indica que lo debe de crear dentro de la carpeta raiz y no crear una carpeta adicional para el proyecto

Para activar el servidor:
    python manage.py runserver



    ***********************APLICACION TASK***************************
pARA INICIAR una palicación usamos el comando:
    python manage.py startapp tasks
Despues agregamos l apalicacion creada en settings.py en el apartado de:
    
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        'tasks',
    ]



********Views nos permite visitar una url*******
Tambien se debe de importar HttpResponse dentro del mismo moculo de views
    def helloword(request):
    return HttpResponse('Hola mundo desde Django')


Para poder visualizar el hola mundo debemos de agregar la vista a urls del proyecto creado djangocrud, dentro de path primero va la ruta y despues la funcion que se llamara al seleccionar tal url
    from tasks import views

    urlpatterns = [
        path('admin/', admin.site.urls),
        path('', views.helloword), nota: las comillas de la url va sin espacion en caso de no agregar nombre
    ]

HttpResponse: # Cuando vamos a usa templates no es necesario usar HttpResponse si no render ya que renderiza los formatos html, En las vistas de Django, se utiliza HttpResponse para devolver el resultado de una solicitud. Si la vista no devuelve un objeto HttpResponse, Django asumirá que no está manejando correctamente la solicitud.

Render: Renderizar plantillas HTML: La función render() es la forma más común de devolver respuestas HTML dinámicas. Permite utilizar plantillas en las que se pueden incrustar variables o datos de Python.

    Parámetros de la función render()
        *request: El objeto de solicitud HTTP que contiene todos los datos de la solicitud hecha por el cliente (como las cookies, los datos del formulario, etc.).
        *template_name: El nombre de la plantilla HTML que se va a renderizar (en este caso, 'mi_plantilla.html').
        *context: Un diccionario que contiene las variables que quieres pasar a la plantilla. Estas variables pueden ser cualquier tipo de dato que necesites mostrar dinámicamente.


**********************FORMS*********************
cADA FORMULARIO debe de usar csrf_token ya que es una medida de seguridad para el uso de los formularios, evita que sean suplantados 

    <form action="/singup/" method="POST">
        {% csrf_token %}
        {{form.as_p}}

        <button>
            Singup
        </button>
    </form>

En url se debe de agragar la ruta a la cual se envíara  el formulario
    path('singup/', views.helloword)



**********Register User************+
antes de agregar un usuario debemos de hacer las migraciones correspondientes para poder agregar usuarios:

def singup(request):
    if request.method == 'GET':
        print('Enviando formulario')
        return render(request, 'singup.html',{
        'form': UserCreationForm
    })
    else:
        if request.POST['password1'] == request.POST['password2']:
            try:
                #register user 
                user = User.objects.create_user(username=request.POST['username'], password=request.POST['password1'])
                user.save()
                return HttpResponse('User created successfuly')
            except:
                return HttpResponse('User already exists')
        return HttpResponse('Password do not match')




**********************MEJORANDO ERRORES*****************+
********************************************************

Se agrego el renderizado a los errores para que en vez de cargar una nueva página con los errores nos cargue en mismo formulario y en la parte superior nos muestre el error:

views.py
    def singup(request):
    if request.method == 'GET':
        print('Enviando formulario')
        return render(request, 'singup.html', {
            'form': UserCreationForm
        })
    else:
        if request.POST['password1'] == request.POST['password2']:
            try:
                # register user
                user = User.objects.create_user(
                username=request.POST['username'], password=request.POST['password1'])
                user.save()
                return HttpResponse('User created successfuly')
            except:
                return render(request, 'singup.html', {
                    'form': UserCreationForm,
                    'error': 'User already exists'
                })
                # de esta manera en vez de que cargue un template con el error lo redirige al mismo template y en la parte superior agrega el error, mostrando la página del formulario
        return render(request, 'singup.html', {
            'form': UserCreationForm,
            'error': 'Password do not match'
        })

singup.html:
    <h1>Singup</h1>

    {% comment %} Muestra ek error que se origina en la funcion singup {% endcomment %}
    {{error}}

    {% comment %} Con action indicamos a donde queremos enviar los datos, que es a singup y si lo omitimos por defecto los envia a la misma ruta donde fueron almacenados o requeridos {% endcomment %}
    <form action="/singup/" method="POST">
        {% csrf_token %}
        {{form.as_p}}

        <button>
            Singup
        </button>
    </form>





***************LOGIN Y VISTA DE TAREAS**************+
*****************************************************
Redirect: no redireccionan a un template en especifico o ruta definida usando el redirect

# Para crear usuarios importa la clase User
    from django.contrib.auth.models import User

#tambien podemos usar errores especificos como integrity error
    from django.db import IntegrityError

#permite crear una cookie que indica que se ha iniciado sesión, nota: no valida que los datos sean correctos
    from django.contrib.auth import login

#En la seccion del excep solo se agrego el IntegrityError
    except IntegrityError: #-> podemos considerar exepciones a errores en especifico



***************templates and condicionales***************
*********************************************************

Para desloguearnos entramos a modo desarrollador en el apartado de aplicacions - cookies - sessionid click derecho eliminar sessionid

Dentro de base creamos un if en el cual si un usuario esta logeado aparacere el icono o el url de logout y si esta deslogueado aparecera singup:
    <nav>
        <ul>
            <li>
                <a href='/'>Home</a>
            </li>
            <li>
                <a href='/tasks'>Tasks</a>
            </li>
            {% if user.is_authenticated %}
                <li>
                    <a href='/logout'>Logout</a>
                </li>
            {% else %}
                <li>
                    <a href='/singup'>Singup</a>
                </li>
            {% endif %}
        </ul>
    </nav>


****************Logout************************
**********************************************
e importamos la clase logout depues de login en la misma linea:
    #usa la clase de logout la cual debemos de importar, no se puede usar logout como nombre de la función si no marcará error, al cerrar la sesión nos enviara a home
    def singout(request):
        logout(request)
        return redirect('home')
    
Tambien agregamos la ruta y la funcion creada en views:
     path('logout/', views.singout, name='logout'),



*******************Login******************
******************************************
Para que el usuario vuelva a autenticarse de nuevo y no tener que registrarse cada que necesite iniciar sesión
    1.Usamos AuthenticationForm
    2.authenticate
    3.Agregamos un error en caso de que el usuario y password no coincida
    4.Agregamos el url singin 
    5.Creamo el template singin.html


TAMBIEN tenemos la clase de AuthenticationForm la cual usaremos para iniciar sesión, nos permite comprobar si el usuario existe.

*Usando POST permite que los datos no sean expuestos dentro de la misma url:

*Con ESTA SECCION vemos como envia datos con POST:
    def singin(request):
    if request.method == 'GET':
        return render(request, 'singin.html',{
            'form': AuthenticationForm
        })
    else:
        print(request.POST)
        return render(request, 'singin.html',{
            'form': AuthenticationForm
        })

*Para hacer la autenticacion tambien importamos -> authenticate




******************************Tasks model****************
*********************************************************

*Elemento usados para el modelo task.
    1.ORM Object Relational Mapping permite crear, actualizar, eliminar o leer datos
    2.Creamos la base de datos con la tabla tasks en el archivo -> models.py
    3.Importamos la clase de User a models y creamos la relacion para agregar la foreignkey de user a task
    4.Hacemos el makemigrations para crear la tabla y despues hacemos la migración con migrate y ejecuta la tabla
    5.Podemos interactuar con los modelos desde python manage.py shell, solo que una forma mas compleja que con l ainterfaz grafica
    6.Para acceder a la interfaz grafica podemos usar la de admin, solo que para ingresar debemos de uniciar sesion con un super usuario y lo podemos crear con el siguiete comando: "python manage.py createsuperuser"
        python manage.py createsuperuser
        Username (leave blank to use 'giova'): GiovanniSosa
        Email address: giovanni-sosa-12@outlook.com
        Password: 
        Password (again):
        Superuser created successfully.
    7.Para que la interfaz tenga acceso a las tablas creadas en models.py debemos de aregarlas a admin.py de nuestra aplicacion de task
    8.Agregamos el metodo str dento de models.py para poder visualizar el nombre de la tarea y el usuario asignado a tal tarea.
    9.Podemos agregra datos de solo lectrura en el mismo apartado de admin.py para poder vizualizarlos desde la interfaz grafica donde se agrego:
            from django.contrib import admin
            from .models import Task

            # esta clase nos permite ver en la interfaz de admin campos de solo lectura como el campo created ya que es un campo que se llena de manera automatica al crear cualquier tarea
            # Hereda todo lo que este en admin.ModelAdmin
            class TaskAdmin(admin.ModelAdmin):
                # Indicamos que son campos de solo lectura, colocamos una coma al final porque es una tupla
                readonly_fields = ("created", )
                
            # Register your models here.
            admin.site.register(Task, TaskAdmin)



****************Formulario de Tareas/task model **********************+
**********************************************************
1. crear un template y vista para crear tareas, agregamos el url 
2.Podemos crear formularios a partir de las tablas ya creadas en los modelos, creando un archivo de formularios dentro del proyecto de tareas -> forms.py
3.Dentro de forms.py debemos de importar:
    #Importamos la clase ModelForm
    from django.forms import ModelForm
    # Importamos el modelo con el cual se creara el formulario
    from .models import Task
    #creamos el formulario en form.py
4.Importamos el formulario creado en forms.py a views.py 
    si agregamos el codigo correspondiente a views en la funcion create_task
5.Agregamos la ruta a urls.py



************Guardar tareas****************
********************************************
Podemos guardar los datos de dos formas:
    1.Utilizando models.py importando los datos.
    2.Utilizando forms.py importando los datos para crear y guardar los datos del formulario al mismo tiempo

*Utilizamos TaskForms: de esta maneta nos imprime el formulario en consola sin guardar los datos en la bd y lo estaremos utilizando para guardar los datos
    def tasks(request):
    return render(request, 'tasks.html')

    def create_task(request):
        if request.method == 'GET':
            return render(request, 'create_task.html',{
                'form': TaskForm
            })
        else:
            form = TaskForm(request.POST)
            print(form)
            return render(request, 'create_task.html',{
                'form': TaskForm
            })

    #De estra otra manera ya guardamos datos en nuestra DB:
        def create_task(request):
            if request.method == 'GET':
                return render(request, 'create_task.html',{
                    'form': TaskForm
                })
            else:
                try:
                form = TaskForm(request.POST)
                new_task = form.save(commit=False)
                new_task.user = request.user
                new_task.save()
                return redirect('tasks')
            except ValueError:
                return render(request, 'create_task.html',{
                'form': TaskForm,
                'error':'Please provide a valida data'
            })

4.Dentro de template de create_task tambien debemos de insertar la variable del diccionario que marcara el error {{error}}



*****************Listar Tareas******************
*************************************************

1.Importamos el modelo de task a views.py 
2.Creamos el template task.html
3.Obtenemos las tareas creadas con Taks.objects.all() y las implementamos dentro delrender como un diccionario:
    def tasks(request):
    Task.objects.all()
    return render(request, 'tasks.html',{'tasks':tasks})
4.Dentro del tamplate debemos de recorrer las tareas a traves de un for:
        
{% extends "base.html" %}

        {% block content %}
        <h1>Tasks</h1>

        <ul>
            {% for task in tasks %}
            <li>  
                {% if task.important %} 
                <strong>{{task.title}}</strong>
                {% else %}
                    {{task.title}}
                {% endif %}
                
                <p>{{task.description}}</p>
                <p>{{task.user.username}}</p>
                
            </li>
            {% endfor %}
        </ul>

        {% endblock  %}


 ***********Obtenet Tarea******
 ****************************************
1.Creamos la función task_detail 
2.Tambien creamos el template task_detail.html
3.Agregamos un if dentro de base para separa los url's cuando un usuario esta logeado debe de mostrar home, task, create_task  and logout.
4.



 ************Actualizar tarea************
 ***************************************
 Como editar una tarea -> 

 1.Para agregra el detalle a taskdetail podemos crear un formulario nuevo o utilizar el formulario ya creado en create task, lo reutilizaremos solo para actualizar la tarea dentro de task_datail utilizando eñ metodo get para obtener la información de la tarea y post para hacer la actualización de la misma 

 2. En task_detail.html caragaremos el formulario para que muestr ala descripcion de la taria y aplciar la actualización en caso de ser necesario

 3.Utilizaremos un try catch para posibles errores

 
 ***********Completar y eliminar tarea***************
 ****************************************************
 1.Se creo la vista complete_task
 2.Se agrego un formulario con el boton complete en task_detail
 3. tambien agregamos otro para aliminar la tarea




 ******Listar tareas completadas*******************
 **********************************************
 1.Uso de login_required 
 2.Agregamos LOGIN_URL = 'singin' en settings.py 



********************Uso de Bootstrap*********************
********************************************************+
https://getbootstrap.com/
1.Se puede usar mediante un url agregandolo dentro de la plantilla html dentro del head que es un CDN LINKS:
    https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css

Antes de usar bootstrap en signin estaba el codigo de esta manera:
    {% extends "base.html" %}

{% block content %}

<main class="container py-5">
    <div class="row">
        <div class="col-md-4 offset-md-4">
            {% comment %} Con action indicamos a donde queremos enviar los datos, que es a singup y si lo omitimos por defecto los envia a la misma ruta donde fueron almacenados o requeridos {% endcomment %}
            <form action="/singup/" method="POST" class="card card-body text-center">

                <h1>Singup</h1>

                {% comment %} Muestra ek error que se origina en la funcion singup {% endcomment %}
                <strong>{{error}}</strong>

                {% csrf_token %}
                {{form.as_p}} -> en bootstrap omitimos este formulario el cual proviene de UserCreationForm de views.py en la funcion signin
                <button>
                    Singup
                </button>
            </form>
        </div>
    </div>
</main>

{% endblock  %}

Pero como vamos a dar estilos con bootstrap no podemos editar un formulario que no fue creado por nosotros porque ya mantiene su propio estilo asi que crearemos uno para poder aplicar estilos de bootstrap:

++++++++++++++++++++

**Cuando cremos nuestros propios formularios dentro de form.py de nuestra aplicacion podemo afregar propiedades como widgets para dar estiloa nuestro formulario o agregar los componentes deseados y poder estilizarlos:





************************Hacer un deploy**************
****************************************************
Para hacer el deploy de nuestro proyecto podemos usar Django render deploy: Render.com nos permite desplegar aplicaciones y el administrará el servidor. https://render.com/ -> nos podemos conectar mediante la cuanta de githut 

1.Crear un servicio nuevo en WebServices-> seleccionar new web WebServices: el cual nos pide un proyecto de git o gitlab pero antes de cargarlo debemos de hacer la configuración en nuestro proyecto.

Configuracion el proyecto y la podemos buscar con Djangorender.com:
    1.O importar os
    1:Debemos entrar a nuestro proyecto en settings.py y modificar secret key
        SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')
    2.Configurar el apartado DEBUG =  si render no esta en la variable de entorno coloca True caso contrario False
        DEBUG ='RENDER' not in os.environ #SE ENCARGA DE aplicar true or false segun sea la ocasion 
    3.#Esta es una configuracion de seguridad de django, es una lista de dominios o direcciones IP que serán consideradas validad
        ALLOWED_HOSTS = []

        #Es una función de Python que se utiliza para obtener el valor de una variable de entorno. 
        RENDER_EXTERNAL_HOSTNAME = os.environ.get
        #si esxiste la variable de entorno se agregara a allowed_host para que pueda responder peticiones de host validos o autorizados
        if RENDER_EXTERNAL_HOSTNAME:
            ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

    4.Debemos de utilizar una base de datos valida ya que sqlite. solo se usa para desarrollado:
        4.1 debemos de instalar: pip install dj-database-url e importamos a settings -> import dj_database_url
        4.2 instalamos psycopg2-binary que es conector para hacer la conexion a la db
        4.3 configuramos DATABASES en setting.py 
                # Con render:
                DATABASES = {
                    # Si no existe la base de datos 
                    'default':dj_database_url.config(
                        #usaras por defecto
                        default='postgresql://postgres:postgres@localhost/postgres',
                        conn_max_age=600
                    )          
                    }

                    buscamo static files en render.com
    5.Configuración de contenidos estaticos: html. css, js, etc.
        Tambien vamos a instalar pip install whitenoise[brotli] dentro de la termina o consola
    6.Agregamos esta linea -> 'whitenoise.middleware.WhiteNoiseMiddleware' dentro de MIDDLEWARE = []
    7.En configuracion de archivos estaticos agregamos:
        STATIC_URL = '/static/'

        # This production code might break development mode, so we check whether we're in DEBUG mode
        if not DEBUG:
            # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)
            STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
            # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use
            # and renames the files with unique names for each version to support long-term caching
            STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    7.1 crear el staticfiles con el siguiemte comando:
        python manage.py collectstatic,   se spone que lo ejecuta la nube despues de ejecutarlo seleccionamos yes

    8.ejecutamos built Script nos permite crear un scritp que se ejecutara en linux
    8.1 creamos el archivo built.sh y dentro del archivo pegamos:utilice un archivo de script como "build.sh" para automatizar tareas que deben ejecutarse durante el proceso de construcción y despliegue de la aplicación.
            #!/usr/bin/env bash
            # Exit on error
            set -o errexit

            # Modify this line as needed for your package manager (pip, poetry, etc.)
            pip install -r requirements.txt

            # Convert static asset files
            python manage.py collectstatic --no-input

            # Apply any outstanding database migrations
            python manage.py migrate


    8.1Ejecutamos en bash(en este si funciona), cmd  o shel: chmod a+x build.sh
        Presionamos ls es para ver si el script anterior corre o se ejecuta bien/verificar que muestre el archivo build.sh.

    8.2 Añadimos estas dependencias al proyecto: links: https://www.uvicorn.org/ y https://gunicorn.org/
            pip install gunicorn uvicorn
            Se crea la carpeta requirements en la cual almaceta todas las dependencias que estamos usando
            pip freeze > requirements.txt
        


        Despues de hacer el deploy nos marco error:
            1.Vamos a environment y agregamos una variable de entorno
                en key agregamos PYTHON_VERSION  Y EN VALUE la version que estamos usando: 3.13.0
            1.1 guardamos cambios
                Ahora marco error en no module name app
                Vamos a settings y sn startcomand cambiamos a -> gunicorn gunicorn djangocrud.wsgi
            1.2se ejecuta de nuevo y esperamos a que ya no marque errores:
                December 8, 2024 at 5:30 PM
                live
                ea6bc99comente la linea de requirement.txt dentro de build.sh

                    listo indica que ya esta en produccion:
                    GioSosaGacia / django_usermain podemos acceder a traves de ese link
                        https://django-user-wgj3.onrender.com

me marco error 500 al crear el deploy
Me marca error por el conector a la base de datos que es psycopg2:
Tutorial de la creacion del crud con django: https://www.youtube.com/watch?v=e6PkGDH4wWA&t=6606s


Servidor:
https://dashboard.render.com/web/srv-ctb2ini3esus739eals0/events








Por esto no funcionaba: 

    Para solucionarlo, necesitas pasar el nombre de la variable de entorno que deseas obtener. Supongo que la variable de entorno que quieres obtener es algo como RENDER_EXTERNAL_HOSTNAME o similar, dependiendo de tu entorno de despliegue.

Aquí te dejo una versión corregida de tu código:

python
Copiar código
# Esta es la configuración de seguridad de Django, una lista de dominios o direcciones IP que serán consideradas válidas
ALLOWED_HOSTS = []

# Obtén el valor de la variable de entorno correcta
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')

# Si la variable de entorno existe, se agrega a ALLOWED_HOSTS
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
Explicación:
os.environ.get('RENDER_EXTERNAL_HOSTNAME'): Esta línea obtiene el valor de la variable de entorno llamada RENDER_EXTERNAL_HOSTNAME. Si no se encuentra la variable de entorno, devolverá None, lo que evita que el código falle si la variable no está definida.

Condicional if RENDER_EXTERNAL_HOSTNAME: Si la variable de entorno tiene un valor (no es None o vacía), se agrega a ALLOWED_HOSTS.

Consideraciones adicionales:
Asegúrate de que la variable de entorno RENDER_EXTERNAL_HOSTNAME esté definida en tu entorno, ya sea en un archivo .env, en la configuración del servidor o de alguna otra manera.
Si trabajas en un entorno local, también puedes incluir direcciones como 'localhost' o '127.0.0.1' en ALLOWED_HOSTS, de modo que puedas trabajar en tu máquina sin restricciones. Algo así:
python
Copiar código
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
Recomendación adicional:
Para evitar este tipo de errores en el futuro, siempre es buena práctica manejar con más cuidado las variables de entorno y asegurarse de que estén correctamente definidas antes de usarlas.

Después de realizar estos cambios, intenta nuevamente ejecutar tu servidor. Esto debería resolver el error que mencionabas. Si continúas teniendo problemas, no dudes en compartir más detalles.